/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE GNSS_INTEGRITY PACKING
package com.MAVLink.development;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Information about key components of GNSS receivers, like signal authentication, interference and system errors.
 */
public class msg_gnss_integrity extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_GNSS_INTEGRITY = 441;
    public static final int MAVLINK_MSG_LENGTH = 17;
    private static final long serialVersionUID = MAVLINK_MSG_ID_GNSS_INTEGRITY;

    
    /**
     * Errors in the GPS system.
     */
    @Description("Errors in the GPS system.")
    @Units("")
    public long system_errors;
    
    /**
     * Horizontal expected accuracy using satellites successfully validated using RAIM.
     */
    @Description("Horizontal expected accuracy using satellites successfully validated using RAIM.")
    @Units("cm")
    public int raim_hfom;
    
    /**
     * Vertical expected accuracy using satellites successfully validated using RAIM.
     */
    @Description("Vertical expected accuracy using satellites successfully validated using RAIM.")
    @Units("cm")
    public int raim_vfom;
    
    /**
     * GNSS receiver id. Must match instance ids of other messages from same receiver.
     */
    @Description("GNSS receiver id. Must match instance ids of other messages from same receiver.")
    @Units("")
    public short id;
    
    /**
     * Signal authentication state of the GPS system.
     */
    @Description("Signal authentication state of the GPS system.")
    @Units("")
    public short authentication_state;
    
    /**
     * Signal jamming state of the GPS system.
     */
    @Description("Signal jamming state of the GPS system.")
    @Units("")
    public short jamming_state;
    
    /**
     * Signal spoofing state of the GPS system.
     */
    @Description("Signal spoofing state of the GPS system.")
    @Units("")
    public short spoofing_state;
    
    /**
     * The state of the RAIM processing.
     */
    @Description("The state of the RAIM processing.")
    @Units("")
    public short raim_state;
    
    /**
     * An abstract value representing the estimated quality of incoming corrections, or 255 if not available.
     */
    @Description("An abstract value representing the estimated quality of incoming corrections, or 255 if not available.")
    @Units("")
    public short corrections_quality;
    
    /**
     * An abstract value representing the overall status of the receiver, or 255 if not available.
     */
    @Description("An abstract value representing the overall status of the receiver, or 255 if not available.")
    @Units("")
    public short system_status_summary;
    
    /**
     * An abstract value representing the quality of incoming GNSS signals, or 255 if not available.
     */
    @Description("An abstract value representing the quality of incoming GNSS signals, or 255 if not available.")
    @Units("")
    public short gnss_signal_quality;
    
    /**
     * An abstract value representing the estimated PPK quality, or 255 if not available.
     */
    @Description("An abstract value representing the estimated PPK quality, or 255 if not available.")
    @Units("")
    public short post_processing_quality;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_GNSS_INTEGRITY;

        packet.payload.putUnsignedInt(system_errors);
        packet.payload.putUnsignedShort(raim_hfom);
        packet.payload.putUnsignedShort(raim_vfom);
        packet.payload.putUnsignedByte(id);
        packet.payload.putUnsignedByte(authentication_state);
        packet.payload.putUnsignedByte(jamming_state);
        packet.payload.putUnsignedByte(spoofing_state);
        packet.payload.putUnsignedByte(raim_state);
        packet.payload.putUnsignedByte(corrections_quality);
        packet.payload.putUnsignedByte(system_status_summary);
        packet.payload.putUnsignedByte(gnss_signal_quality);
        packet.payload.putUnsignedByte(post_processing_quality);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a gnss_integrity message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.system_errors = payload.getUnsignedInt();
        this.raim_hfom = payload.getUnsignedShort();
        this.raim_vfom = payload.getUnsignedShort();
        this.id = payload.getUnsignedByte();
        this.authentication_state = payload.getUnsignedByte();
        this.jamming_state = payload.getUnsignedByte();
        this.spoofing_state = payload.getUnsignedByte();
        this.raim_state = payload.getUnsignedByte();
        this.corrections_quality = payload.getUnsignedByte();
        this.system_status_summary = payload.getUnsignedByte();
        this.gnss_signal_quality = payload.getUnsignedByte();
        this.post_processing_quality = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_gnss_integrity() {
        this.msgid = MAVLINK_MSG_ID_GNSS_INTEGRITY;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_gnss_integrity( long system_errors, int raim_hfom, int raim_vfom, short id, short authentication_state, short jamming_state, short spoofing_state, short raim_state, short corrections_quality, short system_status_summary, short gnss_signal_quality, short post_processing_quality) {
        this.msgid = MAVLINK_MSG_ID_GNSS_INTEGRITY;

        this.system_errors = system_errors;
        this.raim_hfom = raim_hfom;
        this.raim_vfom = raim_vfom;
        this.id = id;
        this.authentication_state = authentication_state;
        this.jamming_state = jamming_state;
        this.spoofing_state = spoofing_state;
        this.raim_state = raim_state;
        this.corrections_quality = corrections_quality;
        this.system_status_summary = system_status_summary;
        this.gnss_signal_quality = gnss_signal_quality;
        this.post_processing_quality = post_processing_quality;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_gnss_integrity( long system_errors, int raim_hfom, int raim_vfom, short id, short authentication_state, short jamming_state, short spoofing_state, short raim_state, short corrections_quality, short system_status_summary, short gnss_signal_quality, short post_processing_quality, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_GNSS_INTEGRITY;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.system_errors = system_errors;
        this.raim_hfom = raim_hfom;
        this.raim_vfom = raim_vfom;
        this.id = id;
        this.authentication_state = authentication_state;
        this.jamming_state = jamming_state;
        this.spoofing_state = spoofing_state;
        this.raim_state = raim_state;
        this.corrections_quality = corrections_quality;
        this.system_status_summary = system_status_summary;
        this.gnss_signal_quality = gnss_signal_quality;
        this.post_processing_quality = post_processing_quality;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_gnss_integrity(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_GNSS_INTEGRITY;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                            
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_GNSS_INTEGRITY - sysid:"+sysid+" compid:"+compid+" system_errors:"+system_errors+" raim_hfom:"+raim_hfom+" raim_vfom:"+raim_vfom+" id:"+id+" authentication_state:"+authentication_state+" jamming_state:"+jamming_state+" spoofing_state:"+spoofing_state+" raim_state:"+raim_state+" corrections_quality:"+corrections_quality+" system_status_summary:"+system_status_summary+" gnss_signal_quality:"+gnss_signal_quality+" post_processing_quality:"+post_processing_quality+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_GNSS_INTEGRITY";
    }
}
        
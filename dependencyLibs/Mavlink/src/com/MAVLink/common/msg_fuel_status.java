/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE FUEL_STATUS PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Fuel status.
        This message provides "generic" fuel level information for display in a GCS and for triggering failsafes in an autopilot.
        The fuel type and associated units for fields in this message are defined in the enum MAV_FUEL_TYPE.

        The reported `consumed_fuel` and `remaining_fuel` must only be supplied if measured: they must not be inferred from the `maximum_fuel` and the other value.
        A recipient can assume that if these fields are supplied they are accurate.
        If not provided, the recipient can infer `remaining_fuel` from `maximum_fuel` and `consumed_fuel` on the assumption that the fuel was initially at its maximum (this is what battery monitors assume).
        Note however that this is an assumption, and the UI should prompt the user appropriately (i.e. notify user that they should fill the tank before boot).

        This kind of information may also be sent in fuel-specific messages such as BATTERY_STATUS_V2.
        If both messages are sent for the same fuel system, the ids and corresponding information must match.

        This should be streamed (nominally at 0.1 Hz).
      
 */
public class msg_fuel_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_FUEL_STATUS = 371;
    public static final int MAVLINK_MSG_LENGTH = 26;
    private static final long serialVersionUID = MAVLINK_MSG_ID_FUEL_STATUS;

    
    /**
     * Capacity when full. Must be provided.
     */
    @Description("Capacity when full. Must be provided.")
    @Units("")
    public float maximum_fuel;
    
    /**
     * Consumed fuel (measured). This value should not be inferred: if not measured set to NaN. NaN: field not provided.
     */
    @Description("Consumed fuel (measured). This value should not be inferred: if not measured set to NaN. NaN: field not provided.")
    @Units("")
    public float consumed_fuel;
    
    /**
     * Remaining fuel until empty (measured). The value should not be inferred: if not measured set to NaN. NaN: field not provided.
     */
    @Description("Remaining fuel until empty (measured). The value should not be inferred: if not measured set to NaN. NaN: field not provided.")
    @Units("")
    public float remaining_fuel;
    
    /**
     * Positive value when emptying/using, and negative if filling/replacing. NaN: field not provided.
     */
    @Description("Positive value when emptying/using, and negative if filling/replacing. NaN: field not provided.")
    @Units("")
    public float flow_rate;
    
    /**
     * Fuel temperature. NaN: field not provided.
     */
    @Description("Fuel temperature. NaN: field not provided.")
    @Units("K")
    public float temperature;
    
    /**
     * Fuel type. Defines units for fuel capacity and consumption fields above.
     */
    @Description("Fuel type. Defines units for fuel capacity and consumption fields above.")
    @Units("")
    public long fuel_type;
    
    /**
     * Fuel ID. Must match ID of other messages for same fuel system, such as BATTERY_STATUS_V2.
     */
    @Description("Fuel ID. Must match ID of other messages for same fuel system, such as BATTERY_STATUS_V2.")
    @Units("")
    public short id;
    
    /**
     * Percentage of remaining fuel, relative to full. Values: [0-100], UINT8_MAX: field not provided.
     */
    @Description("Percentage of remaining fuel, relative to full. Values: [0-100], UINT8_MAX: field not provided.")
    @Units("%")
    public short percent_remaining;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_FUEL_STATUS;

        packet.payload.putFloat(maximum_fuel);
        packet.payload.putFloat(consumed_fuel);
        packet.payload.putFloat(remaining_fuel);
        packet.payload.putFloat(flow_rate);
        packet.payload.putFloat(temperature);
        packet.payload.putUnsignedInt(fuel_type);
        packet.payload.putUnsignedByte(id);
        packet.payload.putUnsignedByte(percent_remaining);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a fuel_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.maximum_fuel = payload.getFloat();
        this.consumed_fuel = payload.getFloat();
        this.remaining_fuel = payload.getFloat();
        this.flow_rate = payload.getFloat();
        this.temperature = payload.getFloat();
        this.fuel_type = payload.getUnsignedInt();
        this.id = payload.getUnsignedByte();
        this.percent_remaining = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_fuel_status() {
        this.msgid = MAVLINK_MSG_ID_FUEL_STATUS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_fuel_status( float maximum_fuel, float consumed_fuel, float remaining_fuel, float flow_rate, float temperature, long fuel_type, short id, short percent_remaining) {
        this.msgid = MAVLINK_MSG_ID_FUEL_STATUS;

        this.maximum_fuel = maximum_fuel;
        this.consumed_fuel = consumed_fuel;
        this.remaining_fuel = remaining_fuel;
        this.flow_rate = flow_rate;
        this.temperature = temperature;
        this.fuel_type = fuel_type;
        this.id = id;
        this.percent_remaining = percent_remaining;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_fuel_status( float maximum_fuel, float consumed_fuel, float remaining_fuel, float flow_rate, float temperature, long fuel_type, short id, short percent_remaining, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_FUEL_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.maximum_fuel = maximum_fuel;
        this.consumed_fuel = consumed_fuel;
        this.remaining_fuel = remaining_fuel;
        this.flow_rate = flow_rate;
        this.temperature = temperature;
        this.fuel_type = fuel_type;
        this.id = id;
        this.percent_remaining = percent_remaining;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_fuel_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_FUEL_STATUS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                    
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_FUEL_STATUS - sysid:"+sysid+" compid:"+compid+" maximum_fuel:"+maximum_fuel+" consumed_fuel:"+consumed_fuel+" remaining_fuel:"+remaining_fuel+" flow_rate:"+flow_rate+" temperature:"+temperature+" fuel_type:"+fuel_type+" id:"+id+" percent_remaining:"+percent_remaining+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_FUEL_STATUS";
    }
}
        
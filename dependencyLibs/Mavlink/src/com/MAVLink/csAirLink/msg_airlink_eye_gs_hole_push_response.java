/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE PACKING
package com.MAVLink.csAirLink;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Response information about the connected device
 */
public class msg_airlink_eye_gs_hole_push_response extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE = 52003;
    public static final int MAVLINK_MSG_LENGTH = 26;
    private static final long serialVersionUID = MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE;

    
    /**
     * port
     */
    @Description("port")
    @Units("")
    public long ip_port;
    
    /**
     * Hole push response type
     */
    @Description("Hole push response type")
    @Units("")
    public short resp_type;
    
    /**
     * ip version
     */
    @Description("ip version")
    @Units("")
    public short ip_version;
    
    /**
     * ip 4 address
     */
    @Description("ip 4 address")
    @Units("")
    public short ip_address_4[] = new short[4];
    
    /**
     * ip 6 address
     */
    @Description("ip 6 address")
    @Units("")
    public short ip_address_6[] = new short[16];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE;

        packet.payload.putUnsignedInt(ip_port);
        packet.payload.putUnsignedByte(resp_type);
        packet.payload.putUnsignedByte(ip_version);
        
        for (int i = 0; i < ip_address_4.length; i++) {
            packet.payload.putUnsignedByte(ip_address_4[i]);
        }
                    
        
        for (int i = 0; i < ip_address_6.length; i++) {
            packet.payload.putUnsignedByte(ip_address_6[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a airlink_eye_gs_hole_push_response message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.ip_port = payload.getUnsignedInt();
        this.resp_type = payload.getUnsignedByte();
        this.ip_version = payload.getUnsignedByte();
        
        for (int i = 0; i < this.ip_address_4.length; i++) {
            this.ip_address_4[i] = payload.getUnsignedByte();
        }
                
        
        for (int i = 0; i < this.ip_address_6.length; i++) {
            this.ip_address_6[i] = payload.getUnsignedByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_airlink_eye_gs_hole_push_response() {
        this.msgid = MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_airlink_eye_gs_hole_push_response( long ip_port, short resp_type, short ip_version, short[] ip_address_4, short[] ip_address_6) {
        this.msgid = MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE;

        this.ip_port = ip_port;
        this.resp_type = resp_type;
        this.ip_version = ip_version;
        this.ip_address_4 = ip_address_4;
        this.ip_address_6 = ip_address_6;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_airlink_eye_gs_hole_push_response( long ip_port, short resp_type, short ip_version, short[] ip_address_4, short[] ip_address_6, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.ip_port = ip_port;
        this.resp_type = resp_type;
        this.ip_version = ip_version;
        this.ip_address_4 = ip_address_4;
        this.ip_address_6 = ip_address_6;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_airlink_eye_gs_hole_push_response(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

              
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE - sysid:"+sysid+" compid:"+compid+" ip_port:"+ip_port+" resp_type:"+resp_type+" ip_version:"+ip_version+" ip_address_4:"+ip_address_4+" ip_address_6:"+ip_address_6+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE";
    }
}
        
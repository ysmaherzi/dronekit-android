/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE CAMERA_THERMAL_RANGE PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Camera absolute thermal range. This can be streamed when the associated VIDEO_STREAM_STATUS `flag` field bit VIDEO_STREAM_STATUS_FLAGS_THERMAL_RANGE_ENABLED is set, but a GCS may choose to only request it for the current active stream. Use MAV_CMD_SET_MESSAGE_INTERVAL to define message interval (param3 indicates the stream id of the current camera, or 0 for all streams, param4 indicates the target camera_device_id for autopilot-attached cameras or 0 for MAVLink cameras).
 */
public class msg_camera_thermal_range extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE = 277;
    public static final int MAVLINK_MSG_LENGTH = 30;
    private static final long serialVersionUID = MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE;

    
    /**
     * Timestamp (time since system boot).
     */
    @Description("Timestamp (time since system boot).")
    @Units("ms")
    public long time_boot_ms;
    
    /**
     * Temperature max.
     */
    @Description("Temperature max.")
    @Units("degC")
    public float max;
    
    /**
     * Temperature max point x value (normalized 0..1, 0 is left, 1 is right), NAN if unknown.
     */
    @Description("Temperature max point x value (normalized 0..1, 0 is left, 1 is right), NAN if unknown.")
    @Units("")
    public float max_point_x;
    
    /**
     * Temperature max point y value (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown.
     */
    @Description("Temperature max point y value (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown.")
    @Units("")
    public float max_point_y;
    
    /**
     * Temperature min.
     */
    @Description("Temperature min.")
    @Units("degC")
    public float min;
    
    /**
     * Temperature min point x value (normalized 0..1, 0 is left, 1 is right), NAN if unknown.
     */
    @Description("Temperature min point x value (normalized 0..1, 0 is left, 1 is right), NAN if unknown.")
    @Units("")
    public float min_point_x;
    
    /**
     * Temperature min point y value (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown.
     */
    @Description("Temperature min point y value (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown.")
    @Units("")
    public float min_point_y;
    
    /**
     * Video Stream ID (1 for first, 2 for second, etc.)
     */
    @Description("Video Stream ID (1 for first, 2 for second, etc.)")
    @Units("")
    public short stream_id;
    
    /**
     * Camera id of a non-MAVLink camera attached to an autopilot (1-6).  0 if the component is a MAVLink camera (with its own component id).
     */
    @Description("Camera id of a non-MAVLink camera attached to an autopilot (1-6).  0 if the component is a MAVLink camera (with its own component id).")
    @Units("")
    public short camera_device_id;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE;

        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putFloat(max);
        packet.payload.putFloat(max_point_x);
        packet.payload.putFloat(max_point_y);
        packet.payload.putFloat(min);
        packet.payload.putFloat(min_point_x);
        packet.payload.putFloat(min_point_y);
        packet.payload.putUnsignedByte(stream_id);
        packet.payload.putUnsignedByte(camera_device_id);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a camera_thermal_range message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_boot_ms = payload.getUnsignedInt();
        this.max = payload.getFloat();
        this.max_point_x = payload.getFloat();
        this.max_point_y = payload.getFloat();
        this.min = payload.getFloat();
        this.min_point_x = payload.getFloat();
        this.min_point_y = payload.getFloat();
        this.stream_id = payload.getUnsignedByte();
        this.camera_device_id = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_camera_thermal_range() {
        this.msgid = MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_camera_thermal_range( long time_boot_ms, float max, float max_point_x, float max_point_y, float min, float min_point_x, float min_point_y, short stream_id, short camera_device_id) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE;

        this.time_boot_ms = time_boot_ms;
        this.max = max;
        this.max_point_x = max_point_x;
        this.max_point_y = max_point_y;
        this.min = min;
        this.min_point_x = min_point_x;
        this.min_point_y = min_point_y;
        this.stream_id = stream_id;
        this.camera_device_id = camera_device_id;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_camera_thermal_range( long time_boot_ms, float max, float max_point_x, float max_point_y, float min, float min_point_x, float min_point_y, short stream_id, short camera_device_id, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.max = max;
        this.max_point_x = max_point_x;
        this.max_point_y = max_point_y;
        this.min = min;
        this.min_point_x = min_point_x;
        this.min_point_y = min_point_y;
        this.stream_id = stream_id;
        this.camera_device_id = camera_device_id;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_camera_thermal_range(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                      
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" max:"+max+" max_point_x:"+max_point_x+" max_point_y:"+max_point_y+" min:"+min+" min_point_x:"+min_point_x+" min_point_y:"+min_point_y+" stream_id:"+stream_id+" camera_device_id:"+camera_device_id+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_CAMERA_THERMAL_RANGE";
    }
}
        